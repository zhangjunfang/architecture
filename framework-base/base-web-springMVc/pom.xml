<project
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"
	xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.ocean.base</groupId>
	<artifactId>base-web-springMVC</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>war</packaging>
	<name>base-web-springMVC Maven Webapp</name>
	<url>http://maven.apache.org</url>
	<properties>
		<!-- spring版本号 -->
		<spring.version>4.1.7.RELEASE</spring.version>
		<!--javassist -->
		<javassist.version>3.12.1.GA</javassist.version>
		<!--cglib -->
		<cglib.version>3.1</cglib.version>
		<!--aopalliance -->
		<aopalliance.version>1.0</aopalliance.version>
		<!--aspectjweaver -->
		<aspectjweaver.version>1.8.6</aspectjweaver.version>
		<!--antlr -->
		<antlr.version>2.7.7</antlr.version>
		<project.build.sourceEncoding>utf-8</project.build.sourceEncoding><!-- -->
		<!--dom4j -->
		<dom4j.version>1.6.1</dom4j.version>
		<!-- mybatis版本号 -->
		<mybatis.version>3.2.4</mybatis.version>
		<!-- log4j日志文件管理包版本 -->
		<slf4j.version>1.6.6</slf4j.version>
		<log4j.version>1.2.9</log4j.version>
	</properties>

	<dependencies>
		<!-- <dependency> <groupId>org.hibernate</groupId> <artifactId>hibernate-commons-annotations</artifactId> 
			<version>4.0.5.Final</version> </dependency> -->
		<dependency>
			<groupId>dom4j</groupId>
			<artifactId>dom4j</artifactId>
			<version>${dom4j.version}</version>
		</dependency>
		<dependency>
			<groupId>antlr</groupId>
			<artifactId>antlr</artifactId>
			<version>${antlr.version}</version>
		</dependency>

		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjweaver</artifactId>
			<version>${aspectjweaver.version}</version>
		</dependency>
		<dependency>
			<groupId>aopalliance</groupId>
			<artifactId>aopalliance</artifactId>
			<version>${aopalliance.version}</version>
		</dependency>
		<dependency>
			<groupId>javassist</groupId>
			<artifactId>javassist</artifactId>
			<version>${javassist.version}</version>
		</dependency>
		<dependency>
			<groupId>cglib</groupId>
			<artifactId>cglib</artifactId>
			<version>${cglib.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-aop</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-beans</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-core</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-expression</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-aspects</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jdbc</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-orm</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-tx</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-web</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context-support</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-instrument</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-oxm</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-websocket</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<!--注意 需要添加被依赖工程的war文件 或者是 -->
		<dependency>
			<groupId>com.ocean.base</groupId>
			<artifactId>base-web</artifactId>
			<version>0.0.1-SNAPSHOT</version>
			<type>war</type>
			<!-- <scope>runtime</scope> -->
		</dependency>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<version>3.1.0</version>
			<scope>compile</scope>
		</dependency>
	</dependencies>
	<build>
		<finalName>base-web-springMVC</finalName>
		<plugins>
			<!-- 合并多个war -->
			<!-- 1.被合并的子web项目packaging属性必须是war 2.被合并的子web项目，必须在主项目中添加依赖关系。 3. 被合并的子web项目中，如果没有web.xml，则需要在pom.xml中声明 
				<failOnMissingWebXml>false</failOnMissingWebXml> -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<version>2.6</version>
				<configuration>
					<packagingExcludes>WEB-INF/web.xml</packagingExcludes>
					<!-- 被依赖工程的WEB-INF目录下，没有web.xml（有也没用，最终会被覆盖）。默认情况下，packaging类型为war的项目，如果没有web.xml，则构建会失败，因此需要在pom里做一个配置 -->
					<failOnMissingWebXml>false</failOnMissingWebXml>
					<dependentWarIncludes>**/IncludeME,**/images,**/com,**/WEB-INF/lib/*</dependentWarIncludes>
					<useCache>true</useCache>
					<resourceEncoding>UTF-8</resourceEncoding>
					<webResources>
						<!-- <resource> 元配置文件的目录，相对于pom.xml文件的路径 <directory>src/main/webapp/WEB-INF</directory> 
							是否过滤文件，也就是是否启动auto-config的功能 <filtering>true</filtering> 目标路径 <targetPath>WEB-INF</targetPath> 
							</resource> -->
					</webResources>
					<dependentWarExcludes>
						<!-- */web.xml,WEB-INF/lib/*,/sql-map-config.xml,/jdbc.properties,/META-INF/* -->
					</dependentWarExcludes>
					<packagingExcludes>WEB-INF/web.xml</packagingExcludes>
					<overlays>
						<!--The <overlay> element can have the following child elements: 1.id 
							- the id of the overlay. If none is provided, the WAR Plugin will generate 
							one. 2.groupId - the groupId of the overlay artifact you want to configure. 
							3.artifactId - the artifactId of the overlay artifact you want to configure. 
							4.type - the type of the overlay artifact you want to configure. Default 
							value is: war. 4.classifier - the classifier of the overlay artifact you 
							want to configure if multiple artifacts matches the groupId/artifactId. 5.includes 
							- the files to include. By default, all files are included. 6.excludes - 
							the files to exclude. By default, the META-INF directory is excluded. 7.targetPath 
							- the target relative path in the webapp structure, which is only available 
							for overlays of type war. By default, the content of the overlay is added 
							in the root structure of the webapp. 8.skip - set to true to skip this overlay. 
							Default value is: false. 9.filtered - whether to apply filtering to this 
							overlay. Default value is false. -->
						<overlay>
							<!-- 添加需要打成war 项目的groupId和artifactId -->
							<groupId>com.ocean.base</groupId>
							<artifactId>base-web</artifactId>
							<includes></includes>
							<!-- <excludes> <exclude>WEB-INF/classes/images/sampleimage-dependency.jpg</exclude> 
								</excludes> -->
						</overlay>
						<!-- <overlay>
							empty groupId/artifactId represents the current build
							添加需要打成war 项目的groupId和artifactId
							空 代表当前项目war
						</overlay> -->
					</overlays>
				</configuration>
			</plugin>
		</plugins>

	</build>
</project>
